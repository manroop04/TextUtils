{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","value","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","rows","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","message","App","setMode","_useState3","_useState4","setValue","_useState5","_useState6","setAlert","setTimeout","document","body","style","backgroundColor","color","my-3","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.de291901.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg  navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      \r\n    </div>\r\n  </div>\r\n  <div className={`form-check form-switch text-${(props.mode)==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.value}</label>\r\n</div>\r\n</nav>\r\n    </div>\r\n  )\r\n\r\n  // Navbar.propTypes={\r\n  //   title:propTypes.string\r\n  // }\r\n\r\n  // Navbar.defaultProps= {\r\n  //   title:\"Set title here\"\r\n  // }\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const clickMe=()=>{\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\": Converted to Uppercase\",\"success\")\r\n    \r\n  }\r\n  const clickMe2=()=>{\r\n    let newText=text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\": Converted to Lowercase\",\"success\")\r\n    \r\n  }\r\n  const clearMe=()=>{\r\n    let newText='';\r\n    setText(newText);\r\n    props.showAlert(\": Text Cleared\",\"success\")\r\n     \r\n  }\r\n  \r\n  const changeMe=(event)=>{\r\n    \r\n    setText(event.target.value)\r\n  }\r\n  const[text,setText]=useState(\"I am some text\");\r\n  // setText(\"Hey\")\r\n  return (\r\n    <>\r\n      <div className=\"container\"  >\r\n      <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n  {/* <label for=\"exampleFormControlTextarea1\" className=\"form-label\">Example textarea</label> */}\r\n  <textarea className=\"form-control\" rows=\"8\" value={text} onChange={changeMe}></textarea>\r\n</div>\r\n<button className='btn btn-primary mx-3'  onClick={clickMe}>ToUpperCase</button>\r\n<button className='btn btn-primary' onClick={clickMe2}>ToLowerCase</button>\r\n<button className='btn btn-primary mx-3'  onClick={clearMe}>ClearText</button>\r\n    </div>\r\n\r\n    <div className='container my-3'>\r\n      <h2>Summary of your text</h2>\r\n      <p id='count'>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008*text.split(\" \").length} reading time</p>\r\n      <h2 >Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something to preview..\"}</p> \r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    \r\n        \r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n  <strong>{props.alert.type}</strong>{props.alert.message} \r\n\r\n</div>\r\n    \r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport  React,{ useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\n// let a=\"Manroop\";\nfunction App() {\n  const[mode,setMode]=useState(\"light\");\n  const [value, setValue]=useState('Dark Mode')\n  const[alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n     setAlert({\n      message:message,\n      type:type\n     })\n     setTimeout(()=>{\n      setAlert(null)\n     },1500)\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#002266';\n      setValue(\"Light Mode\");\n      document.body.style.color ='white';  \n      showAlert(\": Dark mode has been enabled\",\"success\");\n      document.title=\"TextUtils-DarkMode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white'\n      setValue(\"Dark Mode\");\n      document.body.style.color ='black';  \n      showAlert(\": Light mode has been enabled\",\"success\");\n      document.title=\"TextUtils-LightMode\"\n    }\n  }\n  return (\n    <>  \n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} value={value}/>\n      <Alert alert={alert}/>\n       <div className='container'my-3>\n       {/* <Routes> */}\n          {/* <Route exact path=\"/\" element={<TextForm heading=\"Enter your text\" mode={mode} showAlert={showAlert}/>}/>\n          \n          {/* <Route exact path=\"/about\" element={<About mode={mode}/>}/> */}\n  \n        {/* </Routes> */}\n        <TextForm heading=\"Enter your text\" mode={mode} showAlert={showAlert}/> \n        </div>\n         {/* </Router> */}\n\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}